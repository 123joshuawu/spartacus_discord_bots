/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogRebase = ContractEventLog<{
  epoch: string;
  rebase: string;
  index: string;
  0: string;
  1: string;
  2: string;
}>;
export type LogStakingContractUpdated = ContractEventLog<{
  stakingContract: string;
  0: string;
}>;
export type LogSupply = ContractEventLog<{
  epoch: string;
  timestamp: string;
  totalSupply: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipPulled = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type OwnershipPushed = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SSpa extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SSpa;
  clone(): SSpa;
  methods: {
    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    INDEX(): NonPayableTransactionObject<string>;

    PERMIT_TYPEHASH(): NonPayableTransactionObject<string>;

    allowance(
      owner_: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceForGons(
      gons: number | string | BN
    ): NonPayableTransactionObject<string>;

    balanceOf(who: string): NonPayableTransactionObject<string>;

    circulatingSupply(): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    gonsForBalance(
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    index(): NonPayableTransactionObject<string>;

    initialize(stakingContract_: string): NonPayableTransactionObject<boolean>;

    initializer(): NonPayableTransactionObject<string>;

    manager(): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    nonces(owner: string): NonPayableTransactionObject<string>;

    permit(
      owner: string,
      spender: string,
      amount: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    pullManagement(): NonPayableTransactionObject<void>;

    pushManagement(newOwner_: string): NonPayableTransactionObject<void>;

    rebase(
      profit_: number | string | BN,
      epoch_: number | string | BN
    ): NonPayableTransactionObject<string>;

    rebases(arg0: number | string | BN): NonPayableTransactionObject<{
      epoch: string;
      rebase: string;
      totalStakedBefore: string;
      totalStakedAfter: string;
      amountRebased: string;
      index: string;
      blockNumberOccured: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    renounceManagement(): NonPayableTransactionObject<void>;

    setIndex(
      _INDEX: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    stakingContract(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      to: string,
      value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    LogRebase(cb?: Callback<LogRebase>): EventEmitter;
    LogRebase(options?: EventOptions, cb?: Callback<LogRebase>): EventEmitter;

    LogStakingContractUpdated(
      cb?: Callback<LogStakingContractUpdated>
    ): EventEmitter;
    LogStakingContractUpdated(
      options?: EventOptions,
      cb?: Callback<LogStakingContractUpdated>
    ): EventEmitter;

    LogSupply(cb?: Callback<LogSupply>): EventEmitter;
    LogSupply(options?: EventOptions, cb?: Callback<LogSupply>): EventEmitter;

    OwnershipPulled(cb?: Callback<OwnershipPulled>): EventEmitter;
    OwnershipPulled(
      options?: EventOptions,
      cb?: Callback<OwnershipPulled>
    ): EventEmitter;

    OwnershipPushed(cb?: Callback<OwnershipPushed>): EventEmitter;
    OwnershipPushed(
      options?: EventOptions,
      cb?: Callback<OwnershipPushed>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "LogRebase", cb: Callback<LogRebase>): void;
  once(
    event: "LogRebase",
    options: EventOptions,
    cb: Callback<LogRebase>
  ): void;

  once(
    event: "LogStakingContractUpdated",
    cb: Callback<LogStakingContractUpdated>
  ): void;
  once(
    event: "LogStakingContractUpdated",
    options: EventOptions,
    cb: Callback<LogStakingContractUpdated>
  ): void;

  once(event: "LogSupply", cb: Callback<LogSupply>): void;
  once(
    event: "LogSupply",
    options: EventOptions,
    cb: Callback<LogSupply>
  ): void;

  once(event: "OwnershipPulled", cb: Callback<OwnershipPulled>): void;
  once(
    event: "OwnershipPulled",
    options: EventOptions,
    cb: Callback<OwnershipPulled>
  ): void;

  once(event: "OwnershipPushed", cb: Callback<OwnershipPushed>): void;
  once(
    event: "OwnershipPushed",
    options: EventOptions,
    cb: Callback<OwnershipPushed>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
